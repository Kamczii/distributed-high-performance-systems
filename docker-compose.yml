version: '3'
services:
  frontend:
    container_name: frontend
    build:
      context: Frontend
      dockerfile: ./Dockerfile
    ports:
      - "4200:8080"
    networks: 
      - rsww-network
  notification:
    container_name: notification
    build:
      context: .
      dockerfile: ./Notifications/Dockerfile
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    ports:
      - "8083:8080"
      - "5083:5005"
    networks:
      - rsww-network
  gateway:
    container_name: gateway
    build:
      context: ./Gateway
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
      - "5080:5005"
    depends_on:
      - eureka
    networks:
      - rsww-network
  eureka:
    container_name: eureka
    build:
      context: ./EurekaServer
      dockerfile: ./Dockerfile
    ports:
      - "8761:8761"
      - "5761:5005"
    networks:
      - rsww-network
  offer_write:
    container_name: offer_write
    build:
      context: .
      dockerfile: ./OfferWrite/Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/offer
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      #      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - ESDB_CONNECTIONSTRING=esdb://eventstore:2113?tls=false
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
    ports:
      - "8082:8082"
      - "5082:5005"
    depends_on:
      - event_store
      - postgres
    networks:
      - rsww-network
  order:
    container_name: order
    build:
      context: .
      dockerfile: ./Order/Dockerfile
    ports:
      - "8086:8080"
      - "5086:5005"
    networks:
      - rsww-network
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/order
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
  payment:
    container_name: payment
    build:
      context: .
      dockerfile: ./Payment/Dockerfile
    ports:
      - "8084:8080"
      - "5084:5005"
    networks:
      - rsww-network
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payment
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
  offer_read:
    container_name: offer_read
    build:
      context: .
      dockerfile: ./OfferRead/Dockerfile
    environment:
      SPRING_DATA_MONGODB_HOST: mongo_read_model
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: offer_read_model
    ports:
      - "8081:8081"
      - "5081:5005"
    depends_on:
      - mongo_read_model
      - kafka
    networks:
      - rsww-network
#  tour_operator:
#    container_name: tour_operator
#    build:
#      context: .
#      dockerfile: ./TourOperator/Dockerfile
#    ports:
#      - "8085:8080"
#      - "5085:5003"
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/tour_operator
#      - SPRING_DATASOURCE_USERNAME=admin
#      - SPRING_DATASOURCE_PASSWORD=admin
#      - BOOTSTRAP_SERVER=kafka:9092
#    depends_on:
#      kafka:
#        condition: service_started
#      postgres:
#        condition: service_started
#    networks:
#      - rsww-network
  mongo_read_model:
    container_name: mongo_read_model
    image: mongo:7.0.7
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    volumes:
      - mongo_read_db:/data/db
    networks:
      - rsww-network
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8089:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_AUTH_DATABASE: read_model
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin@mongo_read_model:27017/
    networks:
      - rsww-network
  event_store:
    container_name: eventstore
    image: eventstore/eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - '1113:1113'
      - '2113:2113'
    networks:
      - rsww-network
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: 'zookeeper:3.8.2'
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - rsww-network
  kafka:
    image: 'bitnami/kafka:3.5.1'
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_PRODUCER_MAX_REQUEST_SIZE: 20971520
    networks:
      - rsww-network
  postgres:
    container_name: postgres
    image: postgres:15.4
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: offer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rsww-network
volumes:
  mongo_read_db:
  eventstore-volume-data:
  eventstore-volume-logs:
  postgres_data:
networks:
  rsww-network:
    driver: bridge